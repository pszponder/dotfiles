[user]
    name = {{ .gitUserName }}
    email = {{ .gitUserEmail }}

# include for all .git projects under ~/repos/github/pszponder
# Copy this pattern for any other git repos
[includeIf "gitdir:~/repos/github/pszponder/**"]
    path = ~/.gitconfig_github_pszponder

[includeIf "gitdir:~/.local/share/chezmoi/"]
    path = ~/.gitconfig_github_pszponder

[core]
    editor = nvim
    excludesfile = ~/.config/git/.gitignore  # always ignore the patterns listed in this file
    autocrlf = input # convert CRLF to LF on commit
    pager = delta --dark # use delta for paging
    # pager = less

[commit]
    verbose = 1 # show diff in commit message editor
    cleanup = scissors # remove everything after scissors line in commit message editor

[stash]
    showPatch = true # show diff when applying stash

[color]
    ui = true # colorize output

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    frag = magenta bold
    meta = yellow bold
    new = green bold
    old = red bold
    whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[help]
    # autoCorrect = immediate # autocorrect typos immediately
    autoCorrect = prompt # prompt before autocorrecting typos

[pager]
    status = true # use less for paging

[diff]
    colorMoved = default
    algorithm = histogram
    interHunkContext = 3
    # noprefix = true
    # tool = default-difftool # use 'git difftool' to see changes

[interactive]
    diffFilter = delta --color-only # use delta for interactive staging
    singleKey = true # allow staging/unstaging a file with a single key press

[rebase]
    autoStash = true # auto stash before rebase
    abbreviateCommands = true # abbreviate rebase commands
    updateRef = true # update branch ref after rebase
    autoSquash = true # auto squash commits
    # tool = default-mergetool # use 'git mergetool' to resolve conflicts

[merge]
    conflictStyle = zdiff3
    autoStash = true # auto stash before merge
    # tool = default-mergetool # use 'git mergetool' to resolve conflicts

[delta]
    hyperlinks = true # enable hyperlinks
    syntax-theme = Dracula
    line-numbers = true # show line numbers
    side-by-side = true # show diffs side-by-side
    zero-width-emphasys = true # highlight changed words only
    navigate = true # allow navigating between hunks
    decorate-auto = true # decorate commit messages

[push]
    default = simple # or 'scurrent' for current branch only
    autoSetupRemote = true # automatically setup remote tracking when pushing a new branch

[pull]
    # rebase = interactive # rebase instead of merge when pulling (and allow interactive rebase)
    rebase = true # rebase instead of merge when pulling

[credential]
    helper = cache --timeout=3600 # stores password for 1 hour

[status]
    # # To show long status, run 'git status --long'
    # short = true # show short status
    # branch = true # show branch name
    # showUntrackedFiles = all # show untracked files

[log]
    follow = true # follow renames

[rerere]
    enabled = true # enable rerere

[gc]
    rerereResolved = 365 # remove resolved conflicts from rerere cache

[alias]
    git = !git # allow running 'git git' to run the native git command

    # stage updates to tracked files (either globally or for a specific path(s)/regex) and show status
    # git u <file1> <file2>... to stage a file and see status
    # Ex. git u '*.py' to stage all changes to python files
    # Ex. git u 'src/**/*.py' to stage all changes to python files in the src directory
    # Ex. git u '*.py' '*.md' to stage all changes to python and markdown files
    u = "!f() { git add --update \"$@\" && git status; }; f"

    # Add a main alias for master to legacy repsoitories
    # Usage: git master-as-main
    alias-master-as-main = !git symbolic-ref refs/heads/main refs/heads/master && git symbolic-ref refs/remotes/origin/main refs/remotes/origin/master && git switch main

    # Select and switch branches w/ fzf
    switch-recent = !git branch --sort=-committerdate --format='%(refname:short) ' | fzf --preview='git log --date=relative --color main..{}' | xargs git switch

    # =======================
    # --- Basic Shortcuts ---
    # =======================
    st = status --short
    ci = commit
    co = checkout
    br = branch
    df = diff
    last = log -1 HEAD --stat
    unstage = reset HEAD --

    # --- Log & History ---
    lg = log --oneline --graph --decorate --all
    last = log -1 HEAD
    lol = log --graph --decorate --oneline --abbrev-commit --all
    hist = log --pretty=format:'%C(yellow)%h%Creset %ad | %Cgreen%s%Creset %C(bold blue)<%an>%Creset' --graph --date=short

    # ===========================
    # --- Undo & Fix Mistakes ---
    # ===========================
    undo = reset --soft HEAD~1         # Undo last commit but keep changes
    unstage = reset HEAD --            # Unstage files (but keep changes)
    amend = commit --amend --no-edit   # Amend last commit without changing message
    fixup = commit --fixup             # Create fixup commit for autosquash
    squash = rebase -i --autosquash    # Interactive rebase with autosquash

    # ========================
    # --- Stash Management ---
    # ========================
    s = stash

    sl = stash list --pretty=format:\"%C(yellow)%gd%C(reset) %C(green)%cr%C(reset) %gs\"

    # Display full diff (patch) for the most recently created stash
    sdiff = stash show -p

    # Stash with a message and show diff
    swip = "!f() { git stash push -m \"WIP: $1\" && git stash show -p stash@{0}; }; f"

    sa = stash apply

    # git unpark            retrieves and removes the most recent stash
    # git unpack <index>    retrieves and removes the stash at specified <index>
    sp = "!f() { \
        if [ -z \"$1\" ]; then \
            git stash pop; \
        else \
            git stash pop \"stash@{$1}\"; \
        fi; \
    }; f"

    sd = stash drop    # Drop last stash

    # interactive stash with a message and preview
    sc = "!f() { git stash save \"$1\" && git stash show -p stash@{0}; }; f"   # stash with message and show patch

    # ==============================
    # --- Remote Tracking & Sync ---
    # ==============================
    fa = fetch --all --prune                          # Prune deleted remotes
    up = !git fetch origin -v && git fetch upstream -v && git merge upstream/main
    pu = push
    pl = pull --rebase

    # ===============================
    # --- Cleaning Local Branches ---
    # ===============================
    bclean = "!git branch --merged | grep -v '\\*\\|main\\|master' | xargs -n 1 git branch -d"
    delete-merged = "!f() { git branch --merged $1 | grep -vE '(^\\*|main|master|dev)' | xargs git branch -d; }; f"

    # removes local branches that no longer exist on remote
    delete-gone = "!git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D"

    # cleans up tracking refs and prunes remote branches
    prune-branches = "!git remote prune origin && git fetch -p"

    # ========================
    # --- Tag & Submodules ---
    # ========================
    tags = tag -l
    smupdate = submodule update --init --recursive

    # ===========================
    # --- Cherry-pick Helpers ---
    # ===========================
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue

    # ========================================
    # --- WIP / Parking Work (Stash-based) ---
    # ========================================

    # Quick stash with message
    quick-stash = "!f() { \
        msg=\"WIP: ${1:-$(date '+%Y-%m-%d %H:%M')}\"; \
        git stash push -m \"$msg\" && \
        echo \"Work stashed: $msg\"; \
    }; f"
    qs = quick-stash

    # Quick commit current work
    quick-commit = "!f() { \
        git add -A && \
        git commit -m \"WIP: $(date '+%Y-%m-%d %H:%M')\" && \
        echo \"Work saved with WIP commit\"; \
    }; f"
    qc = quick-commit

    # Save work and switch to branch (stash-based)
    stash-switch = "!f() { \
        if [ -z \"$1\" ]; then \
            echo \"Usage: git ss <branch-name>\"; \
            return 1; \
        fi; \
        MESSAGE=\"WIP: $(date '+%Y-%m-%d %H:%M') - switching to $1\"; \
        git add -A && \
        git stash push -m \"$MESSAGE\"; \
        \
        if git show-ref --verify --quiet refs/heads/$1; then \
            git checkout \"$1\" && \
            echo \"Switched to existing branch: $1\"; \
        else \
            git checkout -b \"$1\" && \
            echo \"Created and switched to new branch: $1\"; \
        fi; \
    }; f"
    ss = stash-switch

    # Resume work by applying the last stash (stash-based)
    stash-resume = "!f() { \
        if git stash list | head -n 1 | grep -q \"WIP:\"; then \
            git stash pop && \
            echo \"Resumed work - last WIP stash applied\"; \
        else \
            echo \"No WIP stash found to resume from\"; \
        fi; \
    }; f"
    sr = stash-resume

    # Like `wip`, but keeps changes staged
    wips = !git add -A && git stash save "WIP: $(date '+%Y-%m-%d %H:%M')" && git stash show -p

    # Show what branches have WIP commits
    wiplist = "!git for-each-ref --format='%(refname:short) %(objectname:short) %(contents:subject)' refs/heads | grep 'WIP:'"

    # Clean up WIP commits from current branch (interactive)
    wipclean = "!f() { \
        echo \"WIP commits in current branch:\"; \
        git log --oneline --grep=\"^WIP:\" --max-count=10; \
        echo \"\"; \
        read -p \"Do you want to squash these WIP commits? (y/N): \" -n 1 -r; \
        echo; \
        if [[ $REPLY =~ ^[Yy]$ ]]; then \
            wip_count=$(git log --oneline --grep=\"^WIP:\" | wc -l); \
            if [ $wip_count -gt 0 ]; then \
                git rebase -i HEAD~$((wip_count + 1)); \
            fi; \
        fi; \
    }; f"

    # Dangerous: nuke everything uncommitted
    wipe = !git reset --hard && git clean -fd

    # ==============================================
    # --- Quick Context Switching (Commit-based) ---
    # ==============================================

    # Save work and switch to branch (commit-based)
    commit-switch = "!f() { \
        if [ -z \"$1\" ]; then \
            echo \"Usage: git go <branch-name>\"; \
            return 1; \
        fi; \
        MESSAGE=\"WIP: $(date '+%Y-%m-%d %H:%M') - switching to $1\"; \
        git add -A && \
        git commit -m \"$MESSAGE\"; \
        if git show-ref --verify --quiet refs/heads/$1; then \
            git checkout \"$1\" && \
            echo \"Switched to existing branch: $1\"; \
        else \
            git checkout -b \"$1\" && \
            echo \"Created and switched to new branch: $1\"; \
        fi; \
    }; f"
    cs = commit-switch

    # Resume work by undoing the last WIP commit (commit-based)
    commit-resume = "!f() { \
        if git log -1 --pretty=%B | grep -q \"^WIP:\"; then \
            git reset --soft HEAD~1 && \
            echo \"Resumed work - WIP commit undone, changes staged\"; \
        else \
            echo \"No WIP commit found to resume from\"; \
        fi; \
    }; f"
    cr = commit-resume

    # ===========================
    # --- Feature Development ---
    # ===========================

    # Create a new feature branch from main/master
    feature = "!f() { \
        if [ -z \"$1\" ]; then \
            echo \"Usage: git feature <feature-name>\"; \
            return 1; \
        fi; \
        main_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@' 2>/dev/null || echo 'main'); \
        git checkout $main_branch && \
        git pull origin $main_branch && \
        git checkout -b \"feature/$1\" && \
        echo \"Created feature branch: feature/$1\"; \
    }; f"

    # Show current work status
    stat = "!f() { \
        echo \"=== Current Branch ===\"; \
        git branch --show-current; \
        echo \"\"; \
        echo \"=== Working Directory ===\"; \
        git status --short; \
        echo \"\"; \
        echo \"=== Recent Commits ===\"; \
        git log --oneline -5; \
        echo \"\"; \
        echo \"=== Stashes ===\"; \
        git stash list --max-count=3; \
    }; f"
