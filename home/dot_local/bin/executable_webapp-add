#!/usr/bin/env bash
set -uo pipefail # Removed -e to prevent exit on error

# Interactive mode if not all 3 arguments are passed
if [ "$#" -ne 3 ]; then
    echo -e "\e[32mLet's create a new web app you can start with the app launcher.\n\e[0m"
    APP_NAME=$(gum input --prompt "Name> " --placeholder "My favorite web app")
    APP_URL=$(gum input --prompt "URL> " --placeholder "https://example.com")
    ICON_URL=$(gum input --prompt "Icon URL> " --placeholder "See https://dashboardicons.com (must use PNG!)")
else
    # Non-interactive mode with provided arguments
    APP_NAME="$1"
    APP_URL="$2"
    ICON_URL="$3"
fi

# Validate input
if [[ -z "$APP_NAME" || -z "$APP_URL" || -z "$ICON_URL" ]]; then
    echo "You must set app name, app URL, and icon URL!"
    return 1
fi

# Detect the first available browser
local BROWSER_CMD=""
local candidates=("google-chrome" "chrome" "chromium" "brave" "brave-browser")
for browser in "${candidates[@]}"; do
    if command -v "$browser" &>/dev/null; then
        BROWSER_CMD="$browser"
        break
    fi
done

if [[ -z "$BROWSER_CMD" ]]; then
    echo "Error: No supported browser found (Brave, Google Chrome, Chromium)."
    return 1
fi

# Define paths
ICON_DIR="$HOME/.local/share/applications/icons"
DESKTOP_FILE="$HOME/.local/share/applications/$APP_NAME.desktop"
ICON_PATH="$ICON_DIR/$APP_NAME.png"

# Ensure icon directory exists
mkdir -p "$ICON_DIR"

# Download the icon
if ! curl -sL -o "$ICON_PATH" "$ICON_URL"; then
    echo "Error: Failed to download icon."
    return 1
fi

# Generate the .desktop entry
cat >"$DESKTOP_FILE" <<EOF
[Desktop Entry]
Version=1.0
Name=$APP_NAME
Comment=$APP_NAME
Exec=$BROWSER_CMD --new-window --ozone-platform=wayland --app="$APP_URL" --name="$APP_NAME" --class="$APP_NAME"
Terminal=false
Type=Application
Icon=$ICON_PATH
StartupNotify=true
EOF

# Make the desktop file executable
chmod +x "$DESKTOP_FILE"

# Show final message if in interactive mode
if [ "$#" -ne 3 ]; then
    echo -e "You can now find $APP_NAME using the app launcher\n"
fi
