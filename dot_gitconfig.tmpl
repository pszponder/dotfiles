[user]
    name = {{ .gitUserName }}
    email = {{ .gitUserEmail }}

# include for all .git projects under ~/repos/github/pszponder
# Copy this pattern for any other git repos
[includeIf "gitdir:~/repos/github/pszponder/**"]
    path = ~/.gitconfig_github_pszponder

[includeIf "gitdir:~/.local/share/chezmoi/"]
    path = ~/.gitconfig_github_pszponder

[core]
    editor = nvim
    excludesfile = ~/.gitignore  # always ignore the patterns listed in this file
    autocrlf = input # convert CRLF to LF on commit
    pager = delta --dark # use delta for paging
    # pager = less

[commit]
    verbose = 1 # show diff in commit message editor
    cleanup = scissors # remove everything after scissors line in commit message editor

[stash]
    showPatch = true # show diff when applying stash

[color]
    ui = true # colorize output

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    frag = magenta bold
    meta = yellow bold
    new = green bold
    old = red bold
    whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[help]
    # autoCorrect = immediate # autocorrect typos immediately
    autoCorrect = prompt # prompt before autocorrecting typos

[pager]
    status = true # use less for paging

[diff]
    colorMoved = default
    algorithm = histogram
    interHunkContext = 3
    # noprefix = true
    # tool = default-difftool # use 'git difftool' to see changes

[interactive]
    diffFilter = delta --color-only # use delta for interactive staging
    singleKey = true # allow staging/unstaging a file with a single key press

[rebase]
    autoStash = true # auto stash before rebase
    abbreviateCommands = true # abbreviate rebase commands
    updateRef = true # update branch ref after rebase
    autoSquash = true # auto squash commits
    # tool = default-mergetool # use 'git mergetool' to resolve conflicts

[merge]
    conflictStyle = zdiff3
    autoStash = true # auto stash before merge
    # tool = default-mergetool # use 'git mergetool' to resolve conflicts

[delta]
    hyperlinks = true # enable hyperlinks
    syntax-theme = Dracula
    line-numbers = true # show line numbers
    side-by-side = true # show diffs side-by-side
    zero-width-emphasys = true # highlight changed words only
    navigate = true # allow navigating between hunks
    decorate-auto = true # decorate commit messages

[push]
    default = simple # or 'scurrent' for current branch only
    autoSetupRemote = true # automatically setup remote tracking when pushing a new branch

[pull]
    # rebase = interactive # rebase instead of merge when pulling (and allow interactive rebase)
    rebase = true # rebase instead of merge when pulling

[credential]
    helper = cache --timeout=3600 # stores password for 1 hour

[status]
    # # To show long status, run 'git status --long'
    # short = true # show short status
    # branch = true # show branch name
    # showUntrackedFiles = all # show untracked files

[log]
    follow = true # follow renames

[rerere]
    enabled = true # enable rerere

[gc]
    rerereResolved = 365 # remove resolved conflicts from rerere cache

[alias]
    git = !git # allow running 'git git' to run the native git command

    # stage updates to tracked files (either globally or for a specific path(s)/regex) and show status
    # git u <file1> <file2>... to stage a file and see status
    # Ex. git u '*.py' to stage all changes to python files
    # Ex. git u 'src/**/*.py' to stage all changes to python files in the src directory
    # Ex. git u '*.py' '*.md' to stage all changes to python and markdown files
    u = "!f() { git add --update \"$@\" && git status; }; f"

    # Add a main alias for master to legacy repsoitories
    # Usage: git master-as-main
    alias-master-as-main = !git symbolic-ref refs/heads/main refs/heads/master && git symbolic-ref refs/remotes/origin/main refs/remotes/origin/master && git switch main

    # Select and switch branches w/ fzf
    switch-recent = !git branch --sort=-committerdate --format='%(refname:short) ' | fzf --preview='git log --date=relative --color main..{}' | xargs git switch
